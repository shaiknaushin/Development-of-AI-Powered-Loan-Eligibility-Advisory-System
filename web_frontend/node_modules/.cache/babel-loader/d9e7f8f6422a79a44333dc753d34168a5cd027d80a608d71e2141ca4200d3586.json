{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shree\\\\ai-credit-underwriting-system\\\\web_frontend\\\\src\\\\components\\\\Chatbot.js\";\nimport React from 'react';\nimport Chatbot from 'react-chatbot-kit';\nimport 'react-chatbot-kit/build/main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  initialMessages: [{\n    id: 1,\n    message: \"Hello! I'm here to help you with your credit application. What is your full name?\",\n    widget: undefined\n  }],\n  botName: 'CreditBot'\n};\nconst ActionProvider = ({\n  createChatBotMessage,\n  setState,\n  children\n}) => {\n  const handleHello = () => {\n    const botMessage = createChatBotMessage('Hello. Nice to meet you.');\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n\n  // Example action to handle the user's name and ask the next question\n  const handleName = userName => {\n    const botMessage = createChatBotMessage(`Thank you, ${userName}. What is your monthly income?`);\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          handleHello,\n          handleName\n          // Add other actions for your conversation flow here\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_c = ActionProvider;\nconst MessageParser = ({\n  children,\n  actions\n}) => {\n  const parse = message => {\n    const lowerCaseMessage = message.toLowerCase();\n    if (lowerCaseMessage.includes('hello')) {\n      actions.handleHello();\n    }\n\n    // This is a simple logic to handle the conversation flow.\n    // A real application would need more robust state management to know which question was last asked.\n    if (children.props.state.messages.length <= 2) {\n      actions.handleName(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        parse: parse,\n        actions\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_c2 = MessageParser;\nconst AppChatbot = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chatbot, {\n      config: config,\n      messageParser: MessageParser,\n      actionProvider: ActionProvider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_c3 = AppChatbot;\nexport default AppChatbot;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ActionProvider\");\n$RefreshReg$(_c2, \"MessageParser\");\n$RefreshReg$(_c3, \"AppChatbot\");","map":{"version":3,"names":["React","Chatbot","jsxDEV","_jsxDEV","config","initialMessages","id","message","widget","undefined","botName","ActionProvider","createChatBotMessage","setState","children","handleHello","botMessage","prev","messages","handleName","userName","Children","map","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","MessageParser","parse","lowerCaseMessage","toLowerCase","includes","props","state","length","_c2","AppChatbot","messageParser","actionProvider","_c3","$RefreshReg$"],"sources":["C:/Users/shree/ai-credit-underwriting-system/web_frontend/src/components/Chatbot.js"],"sourcesContent":["import React from 'react';\r\nimport Chatbot from 'react-chatbot-kit';\r\nimport 'react-chatbot-kit/build/main.css';\r\n\r\nconst config = {\r\n    initialMessages: [\r\n        {\r\n            id: 1,\r\n            message: \"Hello! I'm here to help you with your credit application. What is your full name?\",\r\n            widget: undefined,\r\n        },\r\n    ],\r\n    botName: 'CreditBot',\r\n};\r\n\r\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\r\n    const handleHello = () => {\r\n        const botMessage = createChatBotMessage('Hello. Nice to meet you.');\r\n        setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, botMessage],\r\n        }));\r\n    };\r\n\r\n    // Example action to handle the user's name and ask the next question\r\n    const handleName = (userName) => {\r\n        const botMessage = createChatBotMessage(`Thank you, ${userName}. What is your monthly income?`);\r\n        setState((prev) => ({\r\n            ...prev,\r\n            messages: [...prev.messages, botMessage],\r\n        }));\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {React.Children.map(children, (child) => {\r\n                return React.cloneElement(child, {\r\n                    actions: {\r\n                        handleHello,\r\n                        handleName,\r\n                        // Add other actions for your conversation flow here\r\n                    },\r\n                });\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MessageParser = ({ children, actions }) => {\r\n    const parse = (message) => {\r\n        const lowerCaseMessage = message.toLowerCase();\r\n\r\n        if (lowerCaseMessage.includes('hello')) {\r\n            actions.handleHello();\r\n        }\r\n\r\n        // This is a simple logic to handle the conversation flow.\r\n        // A real application would need more robust state management to know which question was last asked.\r\n        if (children.props.state.messages.length <= 2) {\r\n             actions.handleName(message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {React.Children.map(children, (child) => {\r\n                return React.cloneElement(child, {\r\n                    parse: parse,\r\n                    actions,\r\n                });\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst AppChatbot = () => {\r\n    return (\r\n        <div>\r\n            <Chatbot\r\n                config={config}\r\n                messageParser={MessageParser}\r\n                actionProvider={ActionProvider}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppChatbot;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}